// # [国家集训队] 拉拉队排练

// ## 题目描述

// 艾利斯顿商学院篮球队要参加一年一度的市篮球比赛了。拉拉队是篮球比赛的一个看点，好的拉拉队往往能帮助球队增加士气，赢得最终的比赛。所以作为拉拉队队长的楚雨荨同学知道，帮助篮球队训练好拉拉队有多么的重要。

// 拉拉队的选拔工作已经结束，在雨荨和校长的挑选下，$n$ 位集优秀的身材、舞技于一体的美女从众多报名的女生中脱颖而出。这些女生将随着篮球队的小伙子们一起，和对手抗衡，为艾利斯顿篮球队加油助威。

// 一个阳光明媚的早晨，雨荨带领拉拉队的队员们开始了排练。$n$ 个女生从左到右排成一行，每个人手中都举了一个写有 $26$ 个小写字母中的某一个的牌子，在比赛的时候挥舞，为小伙子们呐喊、加油。

// 雨荨发现，如果连续的一段女生，有奇数个，并且他们手中的牌子所写的字母，从左到右和从右到左读起来一样，那么这一段女生就被称作和谐小群体。

// 现在雨荨想找出所有和谐小群体，并且按照女生的个数降序排序之后，前 $K$ 个和谐小群体的女生个数的乘积是多少。由于答案可能很大，雨荨只要你告诉她，答案除以 $19930726$ 的余数是多少就行了。

// ## 输入格式

// 第一行为两个正整数 $n$ 和 $K$，含义如题面所述。

// 接下来一行为 $n$ 个字符，代表从左到右女生拿的牌子上写的字母。

// ## 输出格式

// 输出一个整数，代表题目描述中所写的乘积除以 $19930726$ 的余数，如果总的和谐小群体个数小于 $K$，输出一个整数 $-1$。

// ## 样例 #1

// ### 样例输入 #1

// ```
// 5 3
// ababa
// ```

// ### 样例输出 #1

// ```
// 45
// ```

// ## 提示

// ### 样例说明

// 和谐小群体女生所拿牌子上写的字母从左到右按照女生个数降序排序后为 `ababa`，`aba`，`aba`，`bab`，`a`，`a`，`a`，`b`，`b`，前三个长度的乘积为 $5\times 3\times 3 = 45$。


// ### 数据范围与约定


// 测试点 | $n$ | $K$
// -----|---------|---
// 1    | $10$ | $10$
// 2-3  | $100$ | $100$
// 4-7  | $1,000$ | $1,000$
// 8    | $100,000$ | $= 1$
// 9-11 | $100,000$ | $100,000$
// 12-14| $100,000$ | $1,000,000,000,000$
// 15-17| $500,000$ | $1,000,000,000,000$
// 18   | $1,000,000$ | $= 1$
// 19   | $1,000,000$ | $1,000,000$
// 20   | $1,000,000$ | $1,000,000,000,000$
#include <iostream>
#include <bits/stdc++.h>

const int maxN = 1E6 + 5, mod = 19930726;
char s[maxN << 1];
int r[maxN << 1], cnt[maxN];

inline int manacher(int n)
{
    n = (n + 1) << 1;
    r[0] = 0;
    int maxR = 0, center = 0;
    for(int i = 1; i < n; ++i)
    {
        if(maxR > i) r[i] = std::min(r[(center << 1) - i], maxR - i);
        while(s[i + r[i] + 1] == s[i - r[i] - 1]) ++r[i];
        if(maxR < r[i] + i) maxR = r[i] + i, center = i;
    }
    int max_val = 0;
    for(int i = 1; i < n; ++i)
    {
        ++cnt[r[i]];
        if(r[i] % 2) max_val = std::max(max_val, r[i]);
    }
    return max_val;
}

inline int qpow(int a, long long p)
{
    int res = 1;
    while(p)
    {
        if(p & 1) res = 1ll * res * a % mod;
        a = 1ll * a * a % mod;
        p >>= 1;
    }
    return res;
}

int main()
{
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
    int n;
    long long k;
    std::string tmp;
    std::cin >> n >> k >> tmp;
    s[0] = '~', s[1] = '#';
    for(int i = 1; i <= n; ++i)
    {
        s[i << 1] = tmp[i - 1];
        s[i << 1 | 1] = '#';
    }
    s[(n + 1) << 1] = '!';
    int st = manacher(n);
    long long cnt1 = 0;
    int res = 1;
    while(k && ~st)
    {
        cnt1 += cnt[st];
        int p = std::min(cnt1, k);
        res = 1ll * res * qpow(st, p) % mod;
        k -= p;
        st -= 2;
    }
    if(k) res = -1;
    std::cout << res;
    return 0;
}